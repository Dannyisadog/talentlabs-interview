from uuid import uuid4

import pytest
from django.urls import reverse
from ninja.testing import TestClient

from api.models.jobs import Job
from api.routes.jobs import router

client = TestClient(router)

@pytest.fixture
def authenticated_client(auth_token):
    client = TestClient(router)
    client.headers = {"Authorization": f"Bearer {auth_token}"}
    return client

@pytest.fixture
def sample_job_data() -> dict:
    return {
        "id": uuid4(),
        "title": "Software Engineer",
        "companyName": "Test Company",
        "location": "Remote",
        "description": "Test job description",
        "salaryRange": {"min": 100000, "max": 150000, "currency": "USD"},
        "postingDate": "2024-03-20",
        "expirationDate": "2024-04-20",
        "requiredSkills": ["Python", "Django", "PostgreSQL"]
    }

@pytest.fixture
def sample_job(db, sample_job_data):
    # Convert camelCase to snake_case for Django model
    model_data = {
        "id": sample_job_data["id"],
        "title": sample_job_data["title"],
        "company_name": sample_job_data["companyName"],
        "location": sample_job_data["location"],
        "description": sample_job_data["description"],
        "salary_range": sample_job_data["salaryRange"],
        "posting_date": sample_job_data["postingDate"],
        "expiration_date": sample_job_data["expirationDate"],
        "required_skills": sample_job_data["requiredSkills"]
    }
    return Job.objects.create(**model_data)

@pytest.mark.django_db
class TestJobsAPI:
    def test_create_job_success(self, authenticated_client, sample_job_data):
        # Remove id from the request data as it's generated by the server
        request_data = {k: v for k, v in sample_job_data.items() if k != "id"}
        response = authenticated_client.post("/", json=request_data)
        assert response.status_code == 201
        data = response.json()
        assert data["title"] == request_data["title"]
        assert data["company_name"] == request_data["companyName"]
        assert data["location"] == request_data["location"]

    def test_create_job_invalid_data(self, authenticated_client):
        invalid_data = {"title": ""}  # Missing required fields
        response = authenticated_client.post("/", json=invalid_data)
        assert response.status_code == 422  # Django Ninja uses 422 for validation errors
        assert "detail" in response.json()  # Django Ninja uses 'detail' for error messages

    def test_get_job_success(self, authenticated_client, sample_job):
        response = authenticated_client.get(f"/{sample_job.id}")
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == str(sample_job.id)
        assert data["title"] == sample_job.title

    def test_get_job_not_found(self, authenticated_client):
        non_existent_id = uuid4()
        response = authenticated_client.get(f"/{non_existent_id}")
        assert response.status_code == 404
        assert "error" in response.json()

    def test_list_jobs_success(self, authenticated_client, sample_job):
        response = authenticated_client.get("/")
        assert response.status_code == 200
        data = response.json()
        assert "results" in data
        assert len(data["results"]) > 0
        assert data["results"][0]["id"] == str(sample_job.id)

    def test_list_jobs_with_filters(self, authenticated_client, sample_job):
        response = authenticated_client.get(f"/?title={sample_job.title}&companyName={sample_job.company_name}")
        assert response.status_code == 200
        data = response.json()
        assert "results" in data
        assert len(data["results"]) > 0
        assert data["results"][0]["title"] == sample_job.title
        assert data["results"][0]["companyName"] == sample_job.company_name

    def test_update_job_success(self, authenticated_client, sample_job):
        update_data = {
            "title": "Senior Software Engineer",
            "salaryRange": {"min": 100000, "max": 150000, "currency": "USD"}
        }
        response = authenticated_client.put(f"/{sample_job.id}", json=update_data)
        assert response.status_code == 200
        data = response.json()
        assert data["title"] == update_data["title"]
        assert data["salary_range"] == update_data["salaryRange"]
        assert data["company_name"] == sample_job.company_name

    def test_update_job_not_found(self, authenticated_client):
        non_existent_id = uuid4()
        update_data = {"title": "New Title"}
        response = authenticated_client.put(f"/{non_existent_id}", json=update_data)
        assert response.status_code == 404
        assert "error" in response.json()

    def test_delete_job_success(self, authenticated_client, sample_job):
        response = authenticated_client.delete(f"/{sample_job.id}")
        assert response.status_code == 200
        assert response.json()["message"] == "Job deleted successfully"
        
        # Verify job is actually deleted
        get_response = authenticated_client.get(f"/{sample_job.id}")
        assert get_response.status_code == 404

    def test_delete_job_not_found(self, authenticated_client):
        non_existent_id = uuid4()
        response = authenticated_client.delete(f"/{non_existent_id}")
        assert response.status_code == 404
        assert "error" in response.json()
